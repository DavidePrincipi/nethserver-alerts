#!/usr/bin/python
#
# NethServer Monitor Services (NMS)
#
# This daemon monitors the status of all services registered
# inside the configuration database. 
#

import time, socket, subprocess, os, sys, getopt
import json
import daemon


daemonize = 1
tick = 300
ignored_services = ('iaxmodem', 'fetchmail','openvpn', 'nslcd');

'''
_readline and _readlines methods borrowed from the _fileobject class 
in sockets.py, tweaked a little bit for use in the collectd context.
'''
def _readline(sock):
    data = ''
    buf = []
    while data != "\n":
        data = sock.recv(1)
        if not data:
            break
        if data != "\n":
            buf.append(data)
    return ''.join(buf)

def get_services():
    p = subprocess.Popen("/usr/libexec/nethserver/read-service-status", stdout=subprocess.PIPE, shell=True)
    (output, err) = p.communicate()
    p_status = p.wait()
    if p_status == 0:
        return json.loads(output);
    else:
        return {}


def notify(host, now, service, severity, type):
    collectd_sock = "/var/run/collectd.sock" 
    msg = "PUTNOTIF host=%s plugin=service plugin_instance=%s type=stopped severity=%s time=%i message=\"%s is %s\"\n" % (host, service, severity, now, service, type);
    if not os.path.exists(collectd_sock):
        return

    if not daemonize:
        print msg

    try:
        client = socket.socket( socket.AF_UNIX )
        client.connect(collectd_sock)
        client.send(msg)
        _readline(client)
        client.close()
    except socket.error, e:
        print "Socket exception: %s " % e

def run():
    global tick
    old_services = {}

    while 1:
        host = socket.gethostname()
        now = time.time()
        services = get_services()
        for service in services:
            type =''
            severity = ''

            if service in ignored_services:
                continue

            if services[service]['enabled']:
                is_running = services[service]['running']
                if service in old_services:
                    was_running = old_services[service]['running']
                else: #this is the first run
                    was_running = 0

                if is_running != was_running:
                    if not is_running:
                        type = "stopped"
                        severity = "failure"
                    else:
                        type = "running"
                        severity = "okay"

                    notify(host, now, service, severity, type)

        old_services = services
        time.sleep(tick)

def help():
    print "nms [-f] [-h]"
    print "  -f Run in foreground"
    print "  -h Show this help"

def main(argv):
    global daemonize, tick
    try:
        opts, args = getopt.getopt(argv,"hf")
    except getopt.GetoptError:
        help()
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            help()
            sys.exit(0)
        if opt == '-f':
            daemonize = 0
            tick = 5


if __name__ == "__main__":
   main(sys.argv[1:])

if daemonize:
    try:
        import setproctitle
        setproctitle.setproctitle('nms')
    except:
        pass # Ignore errors, since this is only cosmetic

    with daemon.DaemonContext():
       run()
else:
    print "Services will be checked every %i seconds..." % tick
    run()
