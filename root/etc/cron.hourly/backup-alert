#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use Errno;
use esmith::ConfigDB;
use IO::Socket::UNIX;

# duplicity is running?
my $duplicity_status = `ps aux | grep [d]uplicity`;
if($duplicity_status ne "") { exit (1); }

# get configuration props
my $conf = esmith::ConfigDB->open || exit (2);
my $hostname = $conf->get('SystemName')->value();
my $backup = $conf->get('backup-data');
my $backup_status = $backup->prop('status');

# check if backup is enabled
if($backup_status eq 'disabled') { exit (3); }

# open file
my $severity = '';
my $logFile = $backup->prop('LogFile') || '/var/log/last-backup.log';
if( -e $logFile ) {
    open(my $fh, "<", $logFile);
    read $fh, my $content, -s $fh;

    # check if file is in correct format
    if($content =~ /\nErrors\s\d+/) {
        # check for errors
        $content =~ /\nErrors\s(\d+)/;
        # check severity
        $severity = ($1 eq 0 ? 'okay' : 'failure');
    } else {
        # backup is failed for some reasons...
        $severity = 'failure';
    }

    # close file
    close($fh) || exit (5);
} else {
    $severity = 'failure';
}

# open socket
my $sock_path = '/var/run/collectd.sock';
my $socket = IO::Socket::UNIX->new(
    Type => SOCK_STREAM(),
    Peer => $sock_path,
);

# sleep random
sleep(int(rand(10)));

# write on collectd socket
my $timestamp = time();
$socket->send("PUTNOTIF host=$hostname plugin=system plugin_instance=backup type=failure severity=$severity time=$timestamp message=\"backup state is $severity\"\n");

# wait for response
my $buf;
$socket->recv($buf, 1024);
$socket->close();

exit (0);
